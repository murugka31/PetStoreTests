plugins {
    id 'java'
    id "io.qameta.allure" version "2.8.1"
    id "io.freefair.lombok" version "6.0.0-m2"
}

allure {
    autoconfigure = true
    aspectjweaver = true
    version = "2.16.1"
    aspectjVersion = "1.9.6"
    configuration = "testImplementation"

    useJUnit5 {
        version = "2.16.1"
    }
}

repositories {
    mavenCentral()
}

compileJava {
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

dependencies {
    testImplementation (
            "org.aspectj:aspectjweaver:1.9.19",
            'com.codeborne:selenide:5.24.0',
            'org.junit.jupiter:junit-jupiter:5.8.1',
            'org.junit.jupiter:junit-jupiter-params:5.7.2',
            'io.qameta.allure:allure-selenide:2.15.0',
            "org.aeonbits.owner:owner:1.0.12",
            "io.rest-assured:rest-assured:4.4.0",
            "io.rest-assured:json-schema-validator:4.3.1",
            "io.qameta.allure:allure-rest-assured:2.16.1",
            'com.github.javafaker:javafaker:1.0.2',
            "org.assertj:assertj-core:3.21.0",
            'com.googlecode.json-simple:json-simple:1.1.1',
            'com.fasterxml.jackson.core:jackson-databind:2.14.0',
            "org.junit.jupiter:junit-jupiter-api:5.8.2")
    testImplementation 'org.projectlombok:lombok:1.18.24'
    testRuntimeOnly ('org.slf4j:slf4j-simple:1.7.29',
            "org.junit.jupiter:junit-jupiter-engine:5.8.1")
}

test {
    useJUnitPlatform()
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()
    systemProperties += [
            'junit.jupiter.execution.parallel.enabled'                 : System.getProperty("parallelRun"),
            'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
            'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
            'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
            'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads", "2").toInteger()
    ]
    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }

}

task pet_tests(type: Test) {
    useJUnitPlatform {
        includeTags "petTest"
    }
}
task store_tests(type: Test) {
    useJUnitPlatform {
        includeTags "storeTest"
    }
}
task user_tests(type: Test) {
    useJUnitPlatform {
        includeTags "userTest"
    }
}
